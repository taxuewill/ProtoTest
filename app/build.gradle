apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.segway.prototest"
        minSdkVersion 22
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild{
            cmake{
                cppFlags ""
                arguments "-DANDROID_NATIVE_API_LEVEL=android-22",
                          "-DANDROID_TOOLCHAIN_NAME=clang",
                          "-DANDROID_STL=c++_static"
                abiFilters 'x86_64'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets{
        main{
            // 定义proto文件目录
            proto{
                srcDir 'src/main/proto'
                include '**/*.proto'
            }
            jniLibs.srcDirs = ['libs']

        }
    }
    packagingOptions {
        exclude 'META-INF/NOTICE' // will not include NOTICE file
        exclude 'META-INF/LICENSE' // will not include LICENSE file
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    api 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    api 'com.fasterxml.jackson.core:jackson-core:2.9.0'
    api 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    compile project(':common')
    // https://mvnrepository.com/artifact/org.apache.lucene/lucene-core
    compile group: 'org.apache.lucene', name: 'lucene-core', version: '4.0.0'




}

protobuf{
    protoc{
        artifact = 'com.google.protobuf:protoc:3.6.1'
    }

    //这里配置生成目录，编译后会在build的目录下生成对应的java文件
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}
            }
        }
    }

}
