// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NestedEntry.proto

#ifndef PROTOBUF_INCLUDED_NestedEntry_2eproto
#define PROTOBUF_INCLUDED_NestedEntry_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Person.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NestedEntry_2eproto 

namespace protobuf_NestedEntry_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_NestedEntry_2eproto
namespace entry {
class NestedEntry;
class NestedEntryDefaultTypeInternal;
extern NestedEntryDefaultTypeInternal _NestedEntry_default_instance_;
}  // namespace entry
namespace google {
namespace protobuf {
template<> ::entry::NestedEntry* Arena::CreateMaybeMessage<::entry::NestedEntry>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace entry {

// ===================================================================

class NestedEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:entry.NestedEntry) */ {
 public:
  NestedEntry();
  virtual ~NestedEntry();

  NestedEntry(const NestedEntry& from);

  inline NestedEntry& operator=(const NestedEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NestedEntry(NestedEntry&& from) noexcept
    : NestedEntry() {
    *this = ::std::move(from);
  }

  inline NestedEntry& operator=(NestedEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NestedEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NestedEntry* internal_default_instance() {
    return reinterpret_cast<const NestedEntry*>(
               &_NestedEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NestedEntry* other);
  friend void swap(NestedEntry& a, NestedEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NestedEntry* New() const final {
    return CreateMaybeMessage<NestedEntry>(NULL);
  }

  NestedEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NestedEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NestedEntry& from);
  void MergeFrom(const NestedEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NestedEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string strObj = 1 [default = "hello"];
  bool has_strobj() const;
  void clear_strobj();
  static const int kStrObjFieldNumber = 1;
  const ::std::string& strobj() const;
  void set_strobj(const ::std::string& value);
  #if LANG_CXX11
  void set_strobj(::std::string&& value);
  #endif
  void set_strobj(const char* value);
  void set_strobj(const char* value, size_t size);
  ::std::string* mutable_strobj();
  ::std::string* release_strobj();
  void set_allocated_strobj(::std::string* strobj);

  // optional bytes bytesObj = 7;
  bool has_bytesobj() const;
  void clear_bytesobj();
  static const int kBytesObjFieldNumber = 7;
  const ::std::string& bytesobj() const;
  void set_bytesobj(const ::std::string& value);
  #if LANG_CXX11
  void set_bytesobj(::std::string&& value);
  #endif
  void set_bytesobj(const char* value);
  void set_bytesobj(const void* value, size_t size);
  ::std::string* mutable_bytesobj();
  ::std::string* release_bytesobj();
  void set_allocated_bytesobj(::std::string* bytesobj);

  // optional .entry.Person person = 8;
  bool has_person() const;
  void clear_person();
  static const int kPersonFieldNumber = 8;
  private:
  const ::entry::Person& _internal_person() const;
  public:
  const ::entry::Person& person() const;
  ::entry::Person* release_person();
  ::entry::Person* mutable_person();
  void set_allocated_person(::entry::Person* person);

  // optional int64 int64Obj = 3;
  bool has_int64obj() const;
  void clear_int64obj();
  static const int kInt64ObjFieldNumber = 3;
  ::google::protobuf::int64 int64obj() const;
  void set_int64obj(::google::protobuf::int64 value);

  // optional int32 int32Obj = 2;
  bool has_int32obj() const;
  void clear_int32obj();
  static const int kInt32ObjFieldNumber = 2;
  ::google::protobuf::int32 int32obj() const;
  void set_int32obj(::google::protobuf::int32 value);

  // optional float floatObj = 4;
  bool has_floatobj() const;
  void clear_floatobj();
  static const int kFloatObjFieldNumber = 4;
  float floatobj() const;
  void set_floatobj(float value);

  // optional double doubleObj = 5;
  bool has_doubleobj() const;
  void clear_doubleobj();
  static const int kDoubleObjFieldNumber = 5;
  double doubleobj() const;
  void set_doubleobj(double value);

  // optional bool boolObj = 6;
  bool has_boolobj() const;
  void clear_boolobj();
  static const int kBoolObjFieldNumber = 6;
  bool boolobj() const;
  void set_boolobj(bool value);

  // @@protoc_insertion_point(class_scope:entry.NestedEntry)
 private:
  void set_has_strobj();
  void clear_has_strobj();
  void set_has_int32obj();
  void clear_has_int32obj();
  void set_has_int64obj();
  void clear_has_int64obj();
  void set_has_floatobj();
  void clear_has_floatobj();
  void set_has_doubleobj();
  void clear_has_doubleobj();
  void set_has_boolobj();
  void clear_has_boolobj();
  void set_has_bytesobj();
  void clear_has_bytesobj();
  void set_has_person();
  void clear_has_person();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  public:
  static ::google::protobuf::internal::ExplicitlyConstructed< ::std::string> _i_give_permission_to_break_this_code_default_strobj_;
  private:
  ::google::protobuf::internal::ArenaStringPtr strobj_;
  ::google::protobuf::internal::ArenaStringPtr bytesobj_;
  ::entry::Person* person_;
  ::google::protobuf::int64 int64obj_;
  ::google::protobuf::int32 int32obj_;
  float floatobj_;
  double doubleobj_;
  bool boolobj_;
  friend struct ::protobuf_NestedEntry_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NestedEntry

// required string strObj = 1 [default = "hello"];
inline bool NestedEntry::has_strobj() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NestedEntry::set_has_strobj() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NestedEntry::clear_has_strobj() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NestedEntry::clear_strobj() {
  strobj_.ClearToDefaultNoArena(&::entry::NestedEntry::_i_give_permission_to_break_this_code_default_strobj_.get());
  clear_has_strobj();
}
inline const ::std::string& NestedEntry::strobj() const {
  // @@protoc_insertion_point(field_get:entry.NestedEntry.strObj)
  return strobj_.GetNoArena();
}
inline void NestedEntry::set_strobj(const ::std::string& value) {
  set_has_strobj();
  strobj_.SetNoArena(&::entry::NestedEntry::_i_give_permission_to_break_this_code_default_strobj_.get(), value);
  // @@protoc_insertion_point(field_set:entry.NestedEntry.strObj)
}
#if LANG_CXX11
inline void NestedEntry::set_strobj(::std::string&& value) {
  set_has_strobj();
  strobj_.SetNoArena(
    &::entry::NestedEntry::_i_give_permission_to_break_this_code_default_strobj_.get(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:entry.NestedEntry.strObj)
}
#endif
inline void NestedEntry::set_strobj(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_strobj();
  strobj_.SetNoArena(&::entry::NestedEntry::_i_give_permission_to_break_this_code_default_strobj_.get(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:entry.NestedEntry.strObj)
}
inline void NestedEntry::set_strobj(const char* value, size_t size) {
  set_has_strobj();
  strobj_.SetNoArena(&::entry::NestedEntry::_i_give_permission_to_break_this_code_default_strobj_.get(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:entry.NestedEntry.strObj)
}
inline ::std::string* NestedEntry::mutable_strobj() {
  set_has_strobj();
  // @@protoc_insertion_point(field_mutable:entry.NestedEntry.strObj)
  return strobj_.MutableNoArena(&::entry::NestedEntry::_i_give_permission_to_break_this_code_default_strobj_.get());
}
inline ::std::string* NestedEntry::release_strobj() {
  // @@protoc_insertion_point(field_release:entry.NestedEntry.strObj)
  if (!has_strobj()) {
    return NULL;
  }
  clear_has_strobj();
  return strobj_.ReleaseNonDefaultNoArena(&::entry::NestedEntry::_i_give_permission_to_break_this_code_default_strobj_.get());
}
inline void NestedEntry::set_allocated_strobj(::std::string* strobj) {
  if (strobj != NULL) {
    set_has_strobj();
  } else {
    clear_has_strobj();
  }
  strobj_.SetAllocatedNoArena(&::entry::NestedEntry::_i_give_permission_to_break_this_code_default_strobj_.get(), strobj);
  // @@protoc_insertion_point(field_set_allocated:entry.NestedEntry.strObj)
}

// optional int32 int32Obj = 2;
inline bool NestedEntry::has_int32obj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NestedEntry::set_has_int32obj() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NestedEntry::clear_has_int32obj() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NestedEntry::clear_int32obj() {
  int32obj_ = 0;
  clear_has_int32obj();
}
inline ::google::protobuf::int32 NestedEntry::int32obj() const {
  // @@protoc_insertion_point(field_get:entry.NestedEntry.int32Obj)
  return int32obj_;
}
inline void NestedEntry::set_int32obj(::google::protobuf::int32 value) {
  set_has_int32obj();
  int32obj_ = value;
  // @@protoc_insertion_point(field_set:entry.NestedEntry.int32Obj)
}

// optional int64 int64Obj = 3;
inline bool NestedEntry::has_int64obj() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NestedEntry::set_has_int64obj() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NestedEntry::clear_has_int64obj() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NestedEntry::clear_int64obj() {
  int64obj_ = GOOGLE_LONGLONG(0);
  clear_has_int64obj();
}
inline ::google::protobuf::int64 NestedEntry::int64obj() const {
  // @@protoc_insertion_point(field_get:entry.NestedEntry.int64Obj)
  return int64obj_;
}
inline void NestedEntry::set_int64obj(::google::protobuf::int64 value) {
  set_has_int64obj();
  int64obj_ = value;
  // @@protoc_insertion_point(field_set:entry.NestedEntry.int64Obj)
}

// optional float floatObj = 4;
inline bool NestedEntry::has_floatobj() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NestedEntry::set_has_floatobj() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NestedEntry::clear_has_floatobj() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NestedEntry::clear_floatobj() {
  floatobj_ = 0;
  clear_has_floatobj();
}
inline float NestedEntry::floatobj() const {
  // @@protoc_insertion_point(field_get:entry.NestedEntry.floatObj)
  return floatobj_;
}
inline void NestedEntry::set_floatobj(float value) {
  set_has_floatobj();
  floatobj_ = value;
  // @@protoc_insertion_point(field_set:entry.NestedEntry.floatObj)
}

// optional double doubleObj = 5;
inline bool NestedEntry::has_doubleobj() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NestedEntry::set_has_doubleobj() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NestedEntry::clear_has_doubleobj() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NestedEntry::clear_doubleobj() {
  doubleobj_ = 0;
  clear_has_doubleobj();
}
inline double NestedEntry::doubleobj() const {
  // @@protoc_insertion_point(field_get:entry.NestedEntry.doubleObj)
  return doubleobj_;
}
inline void NestedEntry::set_doubleobj(double value) {
  set_has_doubleobj();
  doubleobj_ = value;
  // @@protoc_insertion_point(field_set:entry.NestedEntry.doubleObj)
}

// optional bool boolObj = 6;
inline bool NestedEntry::has_boolobj() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NestedEntry::set_has_boolobj() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NestedEntry::clear_has_boolobj() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NestedEntry::clear_boolobj() {
  boolobj_ = false;
  clear_has_boolobj();
}
inline bool NestedEntry::boolobj() const {
  // @@protoc_insertion_point(field_get:entry.NestedEntry.boolObj)
  return boolobj_;
}
inline void NestedEntry::set_boolobj(bool value) {
  set_has_boolobj();
  boolobj_ = value;
  // @@protoc_insertion_point(field_set:entry.NestedEntry.boolObj)
}

// optional bytes bytesObj = 7;
inline bool NestedEntry::has_bytesobj() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NestedEntry::set_has_bytesobj() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NestedEntry::clear_has_bytesobj() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NestedEntry::clear_bytesobj() {
  bytesobj_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bytesobj();
}
inline const ::std::string& NestedEntry::bytesobj() const {
  // @@protoc_insertion_point(field_get:entry.NestedEntry.bytesObj)
  return bytesobj_.GetNoArena();
}
inline void NestedEntry::set_bytesobj(const ::std::string& value) {
  set_has_bytesobj();
  bytesobj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:entry.NestedEntry.bytesObj)
}
#if LANG_CXX11
inline void NestedEntry::set_bytesobj(::std::string&& value) {
  set_has_bytesobj();
  bytesobj_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:entry.NestedEntry.bytesObj)
}
#endif
inline void NestedEntry::set_bytesobj(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bytesobj();
  bytesobj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:entry.NestedEntry.bytesObj)
}
inline void NestedEntry::set_bytesobj(const void* value, size_t size) {
  set_has_bytesobj();
  bytesobj_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:entry.NestedEntry.bytesObj)
}
inline ::std::string* NestedEntry::mutable_bytesobj() {
  set_has_bytesobj();
  // @@protoc_insertion_point(field_mutable:entry.NestedEntry.bytesObj)
  return bytesobj_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NestedEntry::release_bytesobj() {
  // @@protoc_insertion_point(field_release:entry.NestedEntry.bytesObj)
  if (!has_bytesobj()) {
    return NULL;
  }
  clear_has_bytesobj();
  return bytesobj_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NestedEntry::set_allocated_bytesobj(::std::string* bytesobj) {
  if (bytesobj != NULL) {
    set_has_bytesobj();
  } else {
    clear_has_bytesobj();
  }
  bytesobj_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytesobj);
  // @@protoc_insertion_point(field_set_allocated:entry.NestedEntry.bytesObj)
}

// optional .entry.Person person = 8;
inline bool NestedEntry::has_person() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NestedEntry::set_has_person() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NestedEntry::clear_has_person() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::entry::Person& NestedEntry::_internal_person() const {
  return *person_;
}
inline const ::entry::Person& NestedEntry::person() const {
  const ::entry::Person* p = person_;
  // @@protoc_insertion_point(field_get:entry.NestedEntry.person)
  return p != NULL ? *p : *reinterpret_cast<const ::entry::Person*>(
      &::entry::_Person_default_instance_);
}
inline ::entry::Person* NestedEntry::release_person() {
  // @@protoc_insertion_point(field_release:entry.NestedEntry.person)
  clear_has_person();
  ::entry::Person* temp = person_;
  person_ = NULL;
  return temp;
}
inline ::entry::Person* NestedEntry::mutable_person() {
  set_has_person();
  if (person_ == NULL) {
    auto* p = CreateMaybeMessage<::entry::Person>(GetArenaNoVirtual());
    person_ = p;
  }
  // @@protoc_insertion_point(field_mutable:entry.NestedEntry.person)
  return person_;
}
inline void NestedEntry::set_allocated_person(::entry::Person* person) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(person_);
  }
  if (person) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      person = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, person, submessage_arena);
    }
    set_has_person();
  } else {
    clear_has_person();
  }
  person_ = person;
  // @@protoc_insertion_point(field_set_allocated:entry.NestedEntry.person)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace entry

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NestedEntry_2eproto
